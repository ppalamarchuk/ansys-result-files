#pragma once
#include "ansysdef.h"

#ifdef ARFLIBRARY_EXPORTS
#define ARFLIBRARY_API __declspec(dllexport)
#else
#define ARFLIBRARY_API __declspec(dllimport)
#endif

/**
     * The ARF (Ansys Result Files) namespace provides a C++ library for reading and
     * writing binary result files generated by the ANSYS simulation software. This
     * library is designed to facilitate the extraction, manipulation, and generation
     * of data from ANSYS result files, enabling developers to work with these files in
     * their C++ applications.
     *
     * Key Features:
     * - Reading binary result files (.rth, .rst, .full, etc.).
     * - Writing data to ANSYS result files.
     * - Data extraction and manipulation.
     * - Support for various ANSYS result file formats.
     *
     * The ARF library is a valuable tool for engineers, researchers, and developers
     * who need to integrate ANSYS result file handling into their C++ projects. It
     * simplifies the process of working with ANSYS binary result files, providing a
     * clean and efficient interface for data access and modification.
     */
namespace ARF {

    extern "C" {

        /// <summary>
        /// Opens the result file and extracts header information. Note, this call must be matched with a subsequent
        /// CResRdEnd() to ensure that the file is closed and internal structures are deallocated properly.
        /// </summary>
        /// <param name="FileName"> Full path to the result file to open. (max 260 characters) </param>
        /// <param name="Title [out]"> Title the simulation separated by newlines. (max 162 characters) </param>
        /// <param name="JobName [out]"> Jobname for the simulation. (max 32 characters) </param>
        /// <param name="Units [out]"> Units designator:
        ///                             0 - User Defined Units
        ///                             1 - SI
        ///                             2 - CSG
        ///                             3 - U.S.Customary, using feet
        ///                             4 - U.S.Customary, using inches
        ///                             5 - MKS
        ///                             6 - MPA
        ///                             7 - uMKS
        /// </param>
        /// <param name="NumDOF [out]"> The number of DOF per node </param>
        /// <param name="DOFs [out]"> Array[MAXDOFSPERNODE] of the DOFs per node </param>
        /// <param name="UserCode [out]"> Internal code for this application </param>
        /// <param name="MaxNode [out]"> Maximum node number used </param>
        /// <param name="NumNode [out]"> Number of nodes attached to elements </param>
        /// <param name="MaxElem [out]"> Maximum element number used </param>
        /// <param name="NumElem [out]"> Number of elements used </param>
        /// <param name="MaxResultSet [out]"> Maximum number of result sets (usually 1000) </param>
        /// <param name="NumResultSet [out]"> Number of result sets on file </param>
        ARFLIBRARY_API void CResRdBegin(
            char* FileName, char* Title, char* JobName, int* Units,
            int* NumDOF, int* DOFs, int* UserCode, int* MaxNode,
            int* NumNode, int* MaxElem, int* NumElem,
            int* MaxResultSet, int* NumResultSet
        );

        /// <summary>
        /// Closes the result file, deallocates internal data.
        /// </summary>
        ARFLIBRARY_API void CResRdEnd();

        /// <summary>
        /// Reads geometry header record. Note, this call must be matched
        /// with a subsequent CResRdGeomEnd()
        /// </summary>
        /// <param name="MaxType [out]"> Maximum element type </param>
        /// <param name="MaxReal [out]"> Maximum real constant set number </param>
        /// <param name="MaxCsys [out]"> Maximum coordinate system number </param>
        /// <param name="nXYZ [out]"> Number of nodes with coordinates </param>
        ARFLIBRARY_API void CResRdGeomBegin(int* MaxType, int* MaxReal, int* MaxCsys, int* nXYZ);

        /// <summary>
        /// Finishes Geometry Input
        /// </summary>
        ARFLIBRARY_API void CResRdGeomEnd();

        /// <summary>
        /// Starts element type records
        /// </summary>
        /// <param name="NumType [out]"> Number of defined element types </param>
        ARFLIBRARY_API void CResRdTypeBegin(int* NumType);

        /// <summary>
        /// Reads an element type record
        /// </summary>
        /// <param name="itype"> Element type number </param>
        /// <param name="ielc"> Array[IELCSZ] of element characteristics </param>
        ARFLIBRARY_API void CResRdType(int* itype, int* ielc);

        /// <summary>
        /// Ends element types
        /// </summary>
        ARFLIBRARY_API void CResRdTypeEnd();

        /// <summary>
        /// Starts real constant records
        /// </summary>
        /// <param name="NumReal [out]"> Number of real constant sets defined </param>
        /// <param name="NumPerReal [out]"> Maximum number of real constant in a set </param>
        ARFLIBRARY_API void CResRdRealBegin(int* NumReal, int* NumPerReal);

        /// <summary>
        /// Reads real constant record
        /// </summary>
        /// <param name="iReal"> Real set number </param>
        /// <param name="Rcon [out]"> Array[MAXREALS] of real constants </param>
        ARFLIBRARY_API void CResRdReal(int* iReal, double* Rcon);

        /// <summary>
        /// Ends real constants
        /// </summary>
        ARFLIBRARY_API void CResRdRealEnd();

        /// <summary>
        /// Starts coordinate system records
        /// </summary>
        /// <param name="NumCsys [out]"> Number of defined coordinate systems </param>
        ARFLIBRARY_API void CResRdCsysBegin(int* NumCsys);

        /// <summary>
        /// Reads a coordinate system record
        /// </summary>
        /// <param name="iCsys"> Coordinate system number </param>
        /// <param name="Csys"> Array[MAXREALS] of coordinate system description </param>
        ARFLIBRARY_API void CResRdCsys(int* iCsys, double* Csys);

        /// <summary>
        /// Ends coordinate systems
        /// </summary>
        ARFLIBRARY_API void CResRdCsysEnd();

        /// <summary>
        /// Starts node records
        /// </summary>
        ARFLIBRARY_API void CResRdNodeBegin();

        /// <summary>
        /// Gets a node
        /// </summary>
        /// <param name="iNode"> Node sequence number </param>
        /// <param name="xyzang [out]"> Array[6] of x, y, z, thxy, thyz, thzx for node </param>
        ARFLIBRARY_API void CResRdNode(int* iNode, double* xyzang);

        /// <summary>
        /// Ends Nodes
        /// </summary>
        ARFLIBRARY_API void CResRdNodeEnd();

        /// <summary>
        /// Starts element input
        /// </summary>
        /// <returns></returns>
        ARFLIBRARY_API void CResRdElemBegin();

        /// <summary>
        /// Reads an element
        /// </summary>
        /// <param name="iElem"> The element number </param>
        /// <param name="nodes [out]"> Array[MAXNODESPERELEM] of element nodes </param>
        /// <param name="ElemData [out]"> Array[10] of element information 
        ///                                 mat     - material reference number
        ///                                 type    - element
        ///                                 real    - real constant reference number
        ///                                 secnum  - section number
        ///                                 esys    - element coordinate system
        ///                                 death   - death flag
        ///                                           = 0 - alive
        ///                                           = 1 - dead
        ///                                 solidm  - solid model reference
        ///                                 shape   - coded shape key
        ///                                 elnum   - element number
        ///                                 pexcl   - P - Method exclude key
        /// </param>
        ARFLIBRARY_API void CResRdElem(int* iElem, int* nodes, int* ElemData);

        /// <summary>
        /// Finishes element reading
        /// </summary>
        /// <returns></returns>
        ARFLIBRARY_API void CResRdElemEnd();
        in for all definition
        /// <summary>
        /// Reads the solution header records
        /// </summary>
        /// <param name="key"></param>
        /// <param name="lstep"></param>
        /// <param name="substep"></param>
        /// <param name="ncumit"></param>
        /// <param name="kcmplx"></param>
        /// <param name="time"></param>
        /// <param name="Title"></param>
        /// <param name="DofLab"></param>
        ARFLIBRARY_API void FResRdSolBegin(int* key, int* lstep, int* substep,
            int* ncumit, int* kcmplx, double* time, char* Title, char* DofLab);


    }
}

